//$tlvtest.test_codec.with(AssertFlow)

import FlowHelper._
import org.jboss.netty.buffer._

//#receive

    var m:HashMapStringAny = null
    var xhead:ChannelBuffer = null
    var body:ChannelBuffer = null
    var buff:ChannelBuffer = null
    var ad:AvenueData = null
    var nad:AvenueData = null

    val codec = new AvenueCodec()
    body = ChannelBuffers.dynamicBuffer(50)
    body.writeBytes("123".getBytes())

    ad = new AvenueData(0xa1,1,1,1,1,0,1,0,
        ChannelBuffers.buffer(0),ChannelBuffers.buffer(0))
    buff = codec.encode(ad)
    assertEquals(44,buff.writerIndex)
    nad = codec.decode(buff)
    assertEquals(0,nad.xhead.writerIndex)
    assertEquals(0,nad.body.writerIndex)

    ad = new AvenueData(0xa1,2,1,1,1,0,1,0,
        ChannelBuffers.buffer(0),ChannelBuffers.buffer(0))
    buff = codec.encode(ad)
    assertEquals(28,buff.writerIndex)
    nad = codec.decode(buff)
    assertEquals(0,nad.xhead.writerIndex)
    assertEquals(0,nad.body.writerIndex)

    m = HashMapStringAny( "socId"->"1.1.1.1:1" )
    xhead = TlvCodec4Xhead.encode(10,m,1)
    ad = new AvenueData(0xa1,1,1,1,1,0,1,0,
        xhead,ChannelBuffers.buffer(0))
    buff = codec.encode(ad)
    assertEquals(44+16,buff.writerIndex)
    nad = codec.decode(buff)
    assertEquals(16,nad.xhead.writerIndex)
    assertEquals(0,nad.body.writerIndex)

    xhead.readerIndex(0)
    ad = new AvenueData(0xa1,2,1,1,1,0,1,0,
        xhead,ChannelBuffers.buffer(0))
    buff = codec.encode(ad)
    assertEquals(28+16,buff.writerIndex)
    assertEquals(16,nad.xhead.writerIndex)
    assertEquals(0,nad.body.writerIndex)

    m = HashMapStringAny( "socId"->"1.1.1.1:1" )
    xhead = TlvCodec4Xhead.encode(10,m,1)
    ad = new AvenueData(0xa2,1,3,4,5,0,1,-1,
        xhead,body)
    buff = codec.encode(ad)
    assertEquals(44+16+body.writerIndex,buff.writerIndex)
    assertEquals(44+16,buff.getByte(1)&0xff)
    assertEquals(44+16+body.writerIndex,buff.getInt(4))
    nad = codec.decode(buff)
    assertEquals(0xa2,nad.flag)
    assertEquals(1,nad.version)
    assertEquals(3,nad.serviceId)
    assertEquals(4,nad.msgId)
    assertEquals(5,nad.sequence)
    assertEquals(0,nad.mustReach)
    assertEquals(1,nad.encoding)
    assertEquals(-1,nad.code) // 0 only for 0xa2
    assertEquals(16,nad.xhead.writerIndex)
    assertEquals(44,nad.xhead.arrayOffset)
    assertEquals(3,nad.body.writerIndex)
    assertEquals(60,nad.body.arrayOffset)

    xhead.readerIndex(0)
    body.readerIndex(0)
    ad = new AvenueData(0xa1,2,3,4,5,0,1,0, xhead,body)
    buff = codec.encode(ad)
    assertEquals(28+16+body.writerIndex,buff.writerIndex)
    assertEquals(28+16,(buff.getByte(1)&0xff)*4)
    assertEquals(28+16+body.writerIndex,buff.getInt(4))
    nad = codec.decode(buff)
    assertEquals(0xa1,nad.flag)
    assertEquals(2,nad.version)
    assertEquals(3,nad.serviceId)
    assertEquals(4,nad.msgId)
    assertEquals(5,nad.sequence)
    assertEquals(0,nad.mustReach)
    assertEquals(1,nad.encoding)
    assertEquals(0,nad.code)
    assertEquals(16,nad.xhead.writerIndex)
    assertEquals(28,nad.xhead.arrayOffset)
    assertEquals(3,nad.body.writerIndex)
    assertEquals(44,nad.body.arrayOffset)

    reply(assert_result_code)

